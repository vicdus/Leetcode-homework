class Solution(object):
    def rob(self, nums):
        if nums == []:
            return 0
        if len(nums) == 1:
            return nums[0]
        n = len(nums)
        H = nums
        A = [None for i in range(n)]
        E = [None for i in range(n)]
        A[0], A[1] = H[0], max(H[:2])
        E[0], E[1] = H[0], H[1]
        for i in range(2, n):
            E[i] = max(E[:i - 1]) + H[i]
            A[i] = max([max(E[:i + 1]), max(A[:i])])
        return max(A)
#  Easy dynamic programming. A[i] is maximum amount of money you can rob from nums_1~nums_i, E is max money you can rob from nums_1~nums_i, and nums_i must be robbed.

#  space complexity can be easily improved to O(1).
